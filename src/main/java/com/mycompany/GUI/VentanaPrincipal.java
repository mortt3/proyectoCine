/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.GUI;

import com.mycompany.excepciones.MyException;
import com.mycompany.gestor.*;
import com.mycompany.modelo.Actor;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import static java.lang.System.exit;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author departamento
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private GestorDirectores gestorDirectores;
    private GestorActores gestorActores;
    private GestorPeliculas gestorPeliculas;

    /**
     * Creates new form Principal
     */
    public VentanaPrincipal() {
        initComponents();
        Image icono = Toolkit.getDefaultToolkit().getImage(getClass().getClassLoader().getResource("imagenes\\movie-film_2980226.png"));
        setIconImage(icono);
        try {
            gestorActores = new GestorActores();
            gestorDirectores = new GestorDirectores();
            gestorPeliculas = new GestorPeliculas();
        } catch (MyException e) {
            JOptionPane.showMessageDialog(this, "Error al inicializar gestores: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnRegistrar = new javax.swing.JButton();
        botonBorrar = new javax.swing.JButton();
        botonListado = new javax.swing.JButton();
        botonFin = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnImportar = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        botonModificarPeli = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FILM LOS ENLACES");
        setIconImages(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        botonBorrar.setText("Borrar Pelicula");
        botonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarActionPerformed(evt);
            }
        });

        botonListado.setText("LISTADO");
        botonListado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListadoActionPerformed(evt);
            }
        });

        botonFin.setText("FIN");
        botonFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFinActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/movie-film_2980226.png"))); // NOI18N

        btnImportar.setText("importar");
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar actores");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        botonModificarPeli.setText("Modificar Pelicula");
        botonModificarPeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarPeliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(botonListado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(botonModificarPeli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(btnRegistrar)
                .addGap(18, 18, 18)
                .addComponent(btnBuscar)
                .addGap(18, 18, 18)
                .addComponent(botonModificarPeli)
                .addGap(18, 18, 18)
                .addComponent(botonBorrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(botonListado)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImportar)
                    .addComponent(btnExportar))
                .addGap(18, 18, 18)
                .addComponent(botonFin)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        VentanaOpcionesRegistro vor = new VentanaOpcionesRegistro(this);
        this.setVisible(false);
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void botonFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFinActionPerformed
        borrarCarpetaYCerrar();
        exit(0);

    }//GEN-LAST:event_botonFinActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        borrarCarpetaYCerrar();
    }//GEN-LAST:event_formWindowClosing

    private void botonListadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListadoActionPerformed
        // TODO add your handling code here:
        VentanaListas vL = new VentanaListas(this);
        this.setVisible(false);
    }//GEN-LAST:event_botonListadoActionPerformed

    private void botonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarActionPerformed
        // TODO add your handling code here:
        VentanaBorrarPeli vBP = new VentanaBorrarPeli(this);
        this.setVisible(false);
    }//GEN-LAST:event_botonBorrarActionPerformed

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        // TODO add your handling code here:
        String[] opciones = {"Actores", "Directores", "Películas"};
        int seleccion = JOptionPane.showOptionDialog(this,
                "¿Qué deseas importar?",
                "Importar datos",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0]);

        if (seleccion == -1) {
            return; // usuario cerró el diálogo
        }

        JFileChooser chooser = new JFileChooser();
        int fileSeleccion = chooser.showOpenDialog(this);
        if (fileSeleccion != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File archivo = chooser.getSelectedFile();

        try {
            int formato = opcionFormato(); // ahora devuelve el valor correctamente

            switch (seleccion) {
                case 0: // Actores
                    switch (formato) {
                        case 0: // .txt
                            gestorActores.importarActores(archivo.getAbsolutePath());
                            JOptionPane.showMessageDialog(this, "Actores importados correctamente.");
                            break;
                        case 1: // Binario
                            gestorActores.importarActoresBinario(archivo.getAbsolutePath());
                            JOptionPane.showMessageDialog(this, "Actores importados correctamente.");
                            break;
                            /*
                        case 2: // DOM
                            gestorActores.importarActoresDOM(archivo.getAbsolutePath());
                            JOptionPane.showMessageDialog(this, "Actores importados correctamente (DOM).");
                            break;
                        case 3: // SAX
                            gestorActores.importarActoresSAX(archivo.getAbsolutePath());
                            JOptionPane.showMessageDialog(this, "Actores importados correctamente (SAX).");
                            break;
                            */
                        default:
                            JOptionPane.showMessageDialog(this, "Selección de formato no válida.");
                            break;
                    }
                    break;

                case 1: // Directores
                    switch (formato) {
                        case 0:
                            gestorDirectores.importarDirectores(archivo.getAbsolutePath());
                            JOptionPane.showMessageDialog(this, "Directores importados correctamente.");
                            break;
                        case 1:
                            gestorDirectores.importarDirectoresBinario(archivo.getAbsolutePath());
                            JOptionPane.showMessageDialog(this, "Directores importados correctamente.");
                            break;
                        /*
                        case 2:
                            gestorDirectores.importarDirectoresDOM(archivo.getAbsolutePath());
                            JOptionPane.showMessageDialog(this, "Directores importados correctamente (DOM).");
                            break;
                        case 3:
                            gestorDirectores.importarDirectoresSAX(archivo.getAbsolutePath());
                            JOptionPane.showMessageDialog(this, "Directores importados correctamente (SAX).");
                            break;
                        */
                        default:
                            JOptionPane.showMessageDialog(this, "Selección de formato no válida.");
                            break;
                    }
                    break;

                case 2: // Películas
                    switch (formato) {
                        case 0:
                            gestorPeliculas.importarPeliculas(
                                    archivo.getAbsolutePath(),
                                    gestorDirectores,
                                    gestorActores
                            );
                            JOptionPane.showMessageDialog(this, "Películas importadas correctamente.");
                            break;
                        case 1:
                            gestorPeliculas.importarPeliculasBinario(archivo.getAbsolutePath(),
                                    gestorDirectores,
                                    gestorActores);
                            JOptionPane.showMessageDialog(this, "Películas importadas correctamente.");
                            break;
                        /*
                        case 2:
                            gestorPeliculas.importarPeliculasDOM(
                                    archivo.getAbsolutePath(),
                                    gestorDirectores,
                                    gestorActores
                            );
                            JOptionPane.showMessageDialog(this, "Películas importadas correctamente (DOM).");
                            break;
                        
                        case 3:
                            gestorPeliculas.importarPeliculasSAX(
                                    archivo.getAbsolutePath(),
                                    gestorDirectores,
                                    gestorActores
                            );
                            JOptionPane.showMessageDialog(this, "Películas importadas correctamente (SAX).");
                            break;
                        */ 
                        default:
                            JOptionPane.showMessageDialog(this, "Selección de formato no válida.");
                            break;
                    }
                    break;

                default:
                    JOptionPane.showMessageDialog(this, "Selección no válida.");
                    break;
            }

        } catch (MyException e) {
            JOptionPane.showMessageDialog(this, "Error al importar: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage());
        }

    }//GEN-LAST:event_btnImportarActionPerformed

    private int opcionFormato() throws HeadlessException {
        // Actores

        String[] opcionFormato = {".txt", "binario", "DOM", "SAX"};
        int formato = JOptionPane.showOptionDialog(this,
                "¿Qué deseas importar?",
                "",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opcionFormato,
                opcionFormato[0]);
        return formato;
    }

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        // TODO add your handling code here:
        String[] opciones = {"Texto", "Binario", "...."};
        int seleccion = JOptionPane.showOptionDialog(this,
                "¿como deseas exportar?",
                "",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0]);

        if (seleccion == -1) {
            return; // usuario cerró el diálogo
        }

        JFileChooser chooser = new JFileChooser();
        int fileSeleccion = chooser.showSaveDialog(this);
        if (fileSeleccion != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File archivo = chooser.getSelectedFile();

        try {
            switch (seleccion) {
                case 0: 
                    gestorPeliculas.exportarPeliculas(archivo.getAbsolutePath());
                    JOptionPane.showMessageDialog(this, "Actores exportados correctamente.");
                    break;

                case 1:
                    gestorPeliculas.exportarPeliculasBinario(archivo.getAbsolutePath());
                    JOptionPane.showMessageDialog(this, "Peliculas exportadas correctamente.");
                    break;

                default:
                    JOptionPane.showMessageDialog(this, "Selección no válida.");
                    break;
            }

        } catch (MyException e) {
            JOptionPane.showMessageDialog(this, "Error al exportar: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage());
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:

        String[] opciones = {"Nombre", "Edad",};
        int seleccion = JOptionPane.showOptionDialog(this,
                "como lo deseas buscar",
                "",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0]);

        if (seleccion != -1) {

            switch (seleccion) {
                case 0: //buscar por nombre
                    if (buscarActorNombre()) {
                        return;
                    }
                    break;

                case 1: // buscar por edad
                    if (buscarActorEdad()) {
                        return;
                    }
                    break;

                default:
                    JOptionPane.showMessageDialog(this, "Selección no válida.");
                    break;

            }
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void botonModificarPeliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarPeliActionPerformed
        // TODO add your handling code here:
        VentanaModificarPelicula vMP = new VentanaModificarPelicula(this);
        this.setVisible(false);
    }//GEN-LAST:event_botonModificarPeliActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    //METSODOS----------

    private boolean buscarActorEdad() throws HeadlessException { // buscar por edad
        String edadString;
        int edad;
        try {
            edadString = JOptionPane.showInputDialog(this, "Introduce la edad del actor que quieres buscar:");

            if (edadString == null || edadString.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se introdujo ninguna edad.");
                return true;
            } else {
                edad = Integer.parseInt(edadString.trim()); // castear edad ignorando el espacio final
                GestorActores gestor = new GestorActores();
                List<Actor> actores = gestor.getActores();
                boolean encontrado = false;
                for (Actor a : actores) { // recorrer listado de actores
                    if (a.getEdad() == edad) {
                        JOptionPane.showMessageDialog(this,
                                "Actor encontrado:\nID: " + a.getIdActor() + "\nNombre: " + a.getNombre() + "\nEdad: " + a.getEdad());
                        encontrado = true;
                    }
                }
                if (!encontrado) {
                    JOptionPane.showMessageDialog(this, "No se encontró ningún actor con esa edad.");
                }
            }
        } catch (MyException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "la edad introducida no es un numero valido");
        }
        return false;
    }

    private boolean buscarActorNombre() throws HeadlessException {
        // buscar nombre
        String nombre;
        try {
            nombre = JOptionPane.showInputDialog(this, "Introduce el nombre del actor que quieres buscar:");
            if (nombre == null || nombre.trim().isEmpty()) {  //ver si introduce algun nombre
                JOptionPane.showMessageDialog(this, "No se introdujo ningún nombre.");
                return true;
            }
            GestorActores gestor = new GestorActores();
            List<Actor> actores = gestor.getActores();
            boolean encontrado = false;
            for (Actor a : actores) {    //recorrer los actores
                if (a.getNombre().equalsIgnoreCase(nombre.trim())) {
                    JOptionPane.showMessageDialog(this,
                            "Actor encontrado:\nID: " + a.getIdActor() + "\nNombre: " + a.getNombre() + "\nEdad: " + a.getEdad()); //devuelve el acor que ha sido encontrado
                    encontrado = true;
                }
            }
            if (!encontrado) {
                JOptionPane.showMessageDialog(this, "No se encontró ningún actor con ese nombre");
            }
        } catch (MyException e) {
            JOptionPane.showMessageDialog(this, "Error al buscar: " + e.getMessage());
        }
        return false;
    }

    private void borrarCarpetaYCerrar() {
        File carpeta = new File("src/main/Ficheros");

        if (carpeta.exists()) {
            if (borrarCarpetaRecursiva(carpeta)) {
                JOptionPane.showMessageDialog(this, "Ficheros temporales eliminados. Cerrando la aplicación.");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudieron eliminar algunos ficheros.");
            }
        }

        System.exit(0);
    }

    private boolean borrarCarpetaRecursiva(File carpeta) {
        boolean exito = true;
        File[] archivos = carpeta.listFiles();
        if (archivos != null) {
            for (File archivo : archivos) {
                if (archivo.isDirectory()) {
                    exito &= borrarCarpetaRecursiva(archivo);
                } else {
                    if (!archivo.delete()) {
                        System.err.println("No se pudo borrar archivo: " + archivo.getAbsolutePath());
                        exito = false;
                    }
                }
            }
        }
        if (!carpeta.delete()) {
            System.err.println("No se pudo borrar carpeta: " + carpeta.getAbsolutePath());
            exito = false;
        }
        return exito;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBorrar;
    private javax.swing.JButton botonFin;
    private javax.swing.JButton botonListado;
    private javax.swing.JButton botonModificarPeli;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnImportar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
